{"ast":null,"code":"import _objectSpread from \"/home/ellis/Documentos/projects/magic-memory/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/ellis/Documentos/projects/magic-memory/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ellis/Documentos/projects/magic-memory/src/components/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Btn, Container } from '../styles/App';\nimport { GlobalStyle } from '../styles/Global';\nimport Card from './Card';\nimport { CardGrid } from '../styles/Cards';\nimport MetaData from './MetaData';\nvar cardImgs = [{\n  \"src\": \"/img/helmet-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/potion-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/ring-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/scroll-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/shield-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/sword-1.png\",\n  matched: false\n}];\n\nfunction App() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cards = _useState2[0],\n      setCards = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      turns = _useState4[0],\n      setTurns = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cardOne = _useState6[0],\n      setCardOne = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      cardTwo = _useState8[0],\n      setCardTwo = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      disabled = _useState10[0],\n      setDisabled = _useState10[1];\n\n  var shuffleCards = function shuffleCards() {\n    //! duplicate images\n    var shuffledCards = [].concat(cardImgs, cardImgs).sort(function () {\n      return Math.random() - 0.5;\n    }) //! shuffle cards (less than 0, order stays the same, bigger than 0 order changes)\n    .map(function (card) {\n      return _objectSpread({}, card, {\n        id: Math.random\n      });\n    }); //! add random id\n\n    setCards(shuffledCards);\n    setTurns(0);\n  }; //? handle a choice\n\n\n  var handleChoice = function handleChoice(card) {\n    //! if cardOne = null, update cardOne state (select the card as the first choice)\n    //! else update cardTwo state (select the card as the second choice)\n    cardOne ? setCardTwo(card) : setCardOne(card);\n  }; //? compare cards using source (card.src?) and see if they match, if they do, output to the console (match!) if not log that to the console\n\n\n  useEffect(function () {\n    if (cardOne && cardTwo) {\n      setDisabled(true); //? make cards unclickable until this check ran\n\n      if (cardOne.src === cardTwo.src) {\n        setCards(function (PrevCards) {\n          return PrevCards.map(function (card) {\n            if (card.src === cardOne.src) {\n              return _objectSpread({}, card, {\n                matched: true\n              });\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(function () {\n          return resetTurn();\n        }, 1000);\n      }\n    }\n  }, [cardOne, cardTwo]);\n  console.log(cards); //! reset state and add to turns\n\n  var resetTurn = function resetTurn() {\n    setCardOne(null);\n    setCardTwo(null);\n    setTurns(function (prevTurn) {\n      return prevTurn + 1;\n    });\n    setDisabled(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MetaData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Magic Match\"), /*#__PURE__*/React.createElement(Btn, {\n    onClick: shuffleCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"New Game\"), /*#__PURE__*/React.createElement(CardGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, cards.map(function (card) {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: card.id,\n      card: card,\n      handleChoice: handleChoice,\n      flipped: card === cardOne || card === cardTwo || card.matched //! when should flipped return true\n      //? first card the user chooses\n      //? second card the user chooses\n      //? cards match\n      ,\n      disabled: disabled,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"turns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ellis/Documentos/projects/magic-memory/src/components/App.js"],"names":["React","useState","useEffect","Btn","Container","GlobalStyle","Card","CardGrid","MetaData","cardImgs","matched","App","cards","setCards","turns","setTurns","cardOne","setCardOne","cardTwo","setCardTwo","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","PrevCards","resetTurn","setTimeout","console","log","prevTurn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Btn, Container } from '../styles/App'\nimport { GlobalStyle } from '../styles/Global'\nimport Card from './Card';\nimport { CardGrid } from '../styles/Cards';\nimport MetaData from './MetaData';\n\nconst cardImgs = [\n  {\n    \"src\": \"/img/helmet-1.png\",\n    matched: false\n  },\n  {\n    \"src\": \"/img/potion-1.png\",\n    matched: false\n  },\n  {\n    \"src\": \"/img/ring-1.png\",\n    matched: false\n  },\n  {\n    \"src\": \"/img/scroll-1.png\",\n    matched: false\n  },\n  {\n    \"src\": \"/img/shield-1.png\",\n    matched: false\n  },\n  {\n    \"src\": \"/img/sword-1.png\",\n    matched: false\n  }\n]\n\nfunction App() {\n\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [cardOne, setCardOne] = useState(null)\n  const [cardTwo, setCardTwo] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  const shuffleCards = () => {\n    //! duplicate images\n    const shuffledCards = [...cardImgs, ...cardImgs]\n      .sort(() => Math.random() - 0.5) //! shuffle cards (less than 0, order stays the same, bigger than 0 order changes)\n      .map((card) => ({ ...card, id: Math.random })) //! add random id\n\n    setCards(shuffledCards)\n    setTurns(0)\n  }\n\n  //? handle a choice\n  const handleChoice = (card) => {\n    //! if cardOne = null, update cardOne state (select the card as the first choice)\n    //! else update cardTwo state (select the card as the second choice)\n\n    cardOne ? setCardTwo(card) : setCardOne(card)\n  }\n\n  //? compare cards using source (card.src?) and see if they match, if they do, output to the console (match!) if not log that to the console\n  useEffect(() => { \n    if (cardOne && cardTwo) {\n      setDisabled(true) //? make cards unclickable until this check ran\n      if (cardOne.src === cardTwo.src) {\n        setCards(PrevCards => {\n          return PrevCards.map(card => {\n            if (card.src === cardOne.src) {\n              return { ...card, matched: true }\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  }, [cardOne, cardTwo])\n  console.log(cards)\n\n  //! reset state and add to turns\n  const resetTurn = () => {\n    setCardOne(null)\n    setCardTwo(null)\n    setTurns(prevTurn => prevTurn + 1)\n    setDisabled(false)\n  }\n\n  return (\n    <>\n      <MetaData />\n      <GlobalStyle />\n      <Container>\n        <h1>Magic Match</h1>\n        <Btn onClick={shuffleCards}>New Game</Btn>\n\n        <CardGrid>\n          {cards.map((card) => (\n            <Card\n              key={card.id}\n              card={card}\n              handleChoice={handleChoice}\n              flipped={card === cardOne || card === cardTwo || card.matched}\n                //! when should flipped return true\n                //? first card the user chooses\n                //? second card the user chooses\n                //? cards match\n              disabled={disabled}\n            />\n          ))}\n        </CardGrid>\n        <p className=\"turns\"></p>\n      </Container>\n    </>\n  );\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}